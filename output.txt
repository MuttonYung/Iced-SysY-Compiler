CONSTTK const
INTTK int
IDENFR MAXL
ASSIGN =
INTCON 5
COMMA ,
IDENFR LOSS
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
IDENFR SEA_LEVEL
LBRACK [
INTCON 6
RBRACK ]
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR MINL
ASSIGN =
INTCON 0
COMMA ,
IDENFR MINH
ASSIGN =
MINU -
INTCON 100
SEMICN ;
INTTK int
IDENFR lake
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
IDENFR height
LBRACK [
INTCON 6
RBRACK ]
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR executed
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR dig
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
LPARENT (
INTCON 0
RPARENT )
AND &&
IDENFR a
LEQ <=
IDENFR MAXL
AND &&
IDENFR a
GEQ >=
IDENFR MINL
AND &&
IDENFR b
LEQ <=
IDENFR MAXL
AND &&
IDENFR b
GEQ >=
IDENFR MINL
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR height
LBRACK [
IDENFR a
RBRACK ]
LBRACK [
IDENFR b
RBRACK ]
GRE >
IDENFR MINH
RPARENT )
IDENFR height
LBRACK [
IDENFR a
RBRACK ]
LBRACK [
IDENFR b
RBRACK ]
ASSIGN =
IDENFR height
LBRACK [
IDENFR a
RBRACK ]
LBRACK [
IDENFR b
RBRACK ]
MINU -
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR fix
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR MAXL
AND &&
IDENFR a
GEQ >=
IDENFR MINL
AND &&
IDENFR b
LEQ <=
IDENFR MAXL
AND &&
IDENFR b
GEQ >=
IDENFR MINL
RPARENT )
LBRACE {
IDENFR height
LBRACK [
IDENFR a
RBRACK ]
LBRACK [
IDENFR b
RBRACK ]
ASSIGN =
IDENFR height
LBRACK [
IDENFR a
RBRACK ]
LBRACK [
IDENFR b
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR deep
LPARENT (
INTTK int
IDENFR t
COMMA ,
INTTK int
IDENFR s
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR all
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR MAXL
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR s
LBRACK [
IDENFR i
RBRACK ]
LSS <
IDENFR SEA_LEVEL
LBRACK [
IDENFR t
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
IDENFR all
ASSIGN =
IDENFR all
PLUS +
IDENFR SEA_LEVEL
LBRACK [
IDENFR t
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
MINU -
IDENFR s
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR all
SEMICN ;
RBRACE }
INTTK int
IDENFR preExecute
LPARENT (
RPARENT )
LBRACE {
IDENFR executed
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
IDENFR executed
SEMICN ;
RBRACE }
INTTK int
IDENFR irrigate
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR map
LBRACK [
RBRACK ]
LBRACK [
INTCON 6
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
IDENFR lake
LBRACK [
IDENFR a
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR MAXL
OR ||
IDENFR a
LSS <
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR lake
LBRACK [
IDENFR a
RBRACK ]
ASSIGN =
IDENFR deep
LPARENT (
IDENFR a
COMMA ,
IDENFR map
LBRACK [
IDENFR a
RBRACK ]
RPARENT )
MINU -
IDENFR LOSS
LBRACK [
IDENFR a
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR lake
LBRACK [
IDENFR a
RBRACK ]
LSS <
INTCON 0
RPARENT )
IDENFR lake
LBRACK [
IDENFR a
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR s
ASSIGN =
IDENFR lake
LBRACK [
IDENFR a
RBRACK ]
MULT *
INTCON 7
SEMICN ;
RETURNTK return
IDENFR s
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19377326\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 2
NEQ !=
INTCON 2
AND &&
IDENFR preExecute
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR executed
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "3 x: irrigate, 2 x y: fill, 1 x y: dig, 0: exit.\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 2
EQL ==
INTCON 2
OR ||
IDENFR preExecute
LPARENT (
RPARENT )
RPARENT )
IFTK if
LPARENT (
IDENFR executed
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "Pleas input operator...\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
PLUS +
MINU -
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Bye.\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR dig
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Dig a hole at (%d,%d).\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR fix
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Put some dirt at (%d,%d).\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 3
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR irrigate
LPARENT (
IDENFR a
COMMA ,
IDENFR height
RPARENT )
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Use %dm3 of water to fill row%d.\n"
COMMA ,
IDENFR d
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Wrong command:%d ,try others.\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }